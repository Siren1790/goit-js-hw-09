{"mappings":"AAEA,MAAMA,EAAO,CACVC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,4BAChCE,UAAWH,SAASC,cAAc,eAqErC,MAAMG,EAAQ,IAlEd,MASGC,OACG,MAAMC,EAAOC,KAAKC,UAAU,GAC5BD,KAAKE,OAAOH,E,CAGfI,QACG,GAAIH,KAAKI,SACN,OAEH,MAAMC,EAAYC,KAAKC,MACvBP,KAAKI,UAAW,EAEhBJ,KAAKQ,WAAaC,aAAY,KAC3B,MACMC,EADcJ,KAAKC,MACOF,EAC1BN,EAAOC,KAAKC,UAAUS,GAC5BV,KAAKE,OAAOH,EAAK,GACjB,I,CAGNY,OACGC,cAAcZ,KAAKQ,YACnBR,KAAKI,UAAW,EAChB,MAAML,EAAOC,KAAKC,UAAU,GAC5BD,KAAKE,OAAOH,E,CAKfc,IAAIC,GACD,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,CAGpCC,QAAQH,GACL,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,CAGpCf,UAAUiB,GAEP,MACMC,EAASC,IACTC,EAAOF,KACPG,EAAa,GAAPD,EAWZ,MAAO,C,KARMrB,KAAKiB,QAAQM,KAAKC,MAAMN,EAAKI,I,MAE5BtB,KAAKa,IAAIU,KAAKC,MAAMN,EAAMI,EAAOD,I,QAE/BrB,KAAKa,IAAIU,KAAKC,MAAMN,EAAOI,EAAOD,EAAQF,I,QAE1CnB,KAAKa,IAAIU,KAAKC,MAAMN,EAAQI,EAAOD,EAAQF,EAZ5C,M,CA/ClBM,aAAYvB,OAACA,IACVF,KAAKQ,WAAa,KAClBR,KAAKI,UAAW,EAChBJ,KAAKE,OAASA,EAEdF,KAAKF,M,GA4Da,CACrBI,OAOH,UAAyBwB,KAAEA,EAAIC,MAAEA,EAAKC,QAAEA,EAAOC,QAAEA,IAC9CtC,EAAKK,UAAUkC,YAAc,GAAGJ,KAAQC,KAASC,KAAWC,G,IAL/DtC,EAAKC,SAASuC,iBAAiB,QAASlC,EAAMM,MAAM6B,KAAKnC,IAEzDN,EAAKI,QAAQoC,iBAAiB,QAASlC,EAAMc,KAAKqB,KAAKnC","sources":["src/js/test.js"],"sourcesContent":["import '../css/common.css'\n\nconst refs = {\n   startBtn: document.querySelector('button[data-action-start]'),\n   stopBtn: document.querySelector('button[data-action-stop]'),\n   clockface: document.querySelector('.clockface'),\n}\n\nclass Timer {\n   constructor({onTick}){\n      this.intervalId = null,\n      this.isActive = false,\n      this.onTick = onTick;\n      \n      this.init();\n   }\n\n   init() {\n      const time = this.convertMs(0);\n      this.onTick(time);\n   }\n\n   start() {\n      if (this.isActive) {\n         return;\n      }\n      const startTime = Date.now();\n      this.isActive = true;\n\n      this.intervalId = setInterval(() => {\n         const currentTime = Date.now();\n         const deltaTime = currentTime - startTime;\n         const time = this.convertMs(deltaTime);\n         this.onTick(time);\n      }, 1000);\n   }\n\n   stop() {\n      clearInterval(this.intervalId);\n      this.isActive = false;\n      const time = this.convertMs(0);\n      this.onTick(time);\n   }\n\n\n\n   pad(value) {\n      return String(value).padStart(2, '0');\n   }\n\n   padDays(value) {\n      return String(value).padStart(3, '0');\n   }\n\n   convertMs(ms) {\n      // Number of milliseconds per unit of time\n      const second = 1000;\n      const minute = second * 60;\n      const hour = minute * 60;\n      const day = hour * 24;\n\n      // Remaining days\n      const days = this.padDays(Math.floor(ms / day));\n      // Remaining hours\n      const hours = this.pad(Math.floor((ms % day) / hour));\n      // Remaining minutes\n      const minutes = this.pad(Math.floor(((ms % day) % hour) / minute));\n      // Remaining seconds\n      const seconds = this.pad(Math.floor((((ms % day) % hour) % minute) / second));\n\n      return { days, hours, minutes, seconds };\n   }\n}\n\nconst timer = new Timer({\n   onTick: updateClockFace,\n})\n   \nrefs.startBtn.addEventListener('click', timer.start.bind(timer));\n\nrefs.stopBtn.addEventListener('click', timer.stop.bind(timer));\n\nfunction updateClockFace({ days, hours, minutes, seconds }) {\n   refs.clockface.textContent = `${days}:${hours}:${minutes}:${seconds}`;\n};\n\n\n"],"names":["$6fa7327f1ccc044f$var$refs","startBtn","document","querySelector","stopBtn","clockface","$6fa7327f1ccc044f$var$timer","init","time","this","convertMs","onTick","start","isActive","startTime","Date","now","intervalId","setInterval","deltaTime","stop","clearInterval","pad","value","String","padStart","padDays","ms","minute","second","hour","day","Math","floor","constructor","days","hours","minutes","seconds","textContent","addEventListener","bind"],"version":3,"file":"test.397a86fd.js.map"}